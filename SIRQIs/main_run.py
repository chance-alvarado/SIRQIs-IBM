"""Script responsible for running, logging, and saving simulations.This script is responsible for initializing necessary objects anditerating through discrete timer to simulate infection based on parametersspecified in the 'parameters.py' file. Progression on the number of timesteps simulated as well as number of simulations completed is conditionallyshown during run. Simulations are written to file for later analysis.More information can be found in this project's README file.Explore this repository at:    https://github.com/chance-alvarado/SIRQIs-IBM/Author:    Chance Alvarado        LinkedIn: https://www.linkedin.com/in/chance-alvarado/        GitHub: https://github.com/chance-alvarado/"""# Class importsfrom resources.modules.classes import (GeneralPopulation,                                       Quarantine, Isolation,                                       simulate_time_step)# Parameter importsfrom parameters import (num_runs, num_days,                        results_dict, general_population_dict,                        quarantine_dict, isolation_dict)# Tracking importsfrom resources.modules.tracking import ProgressTracker# Result writing importsfrom resources.modules.results_writing import ResultsWriter# Plotting importsimport resources.modules.plotting as plot# Dictionary to track run progressprogress_dict = {    'Simulations run': [0, num_runs],    'Days elapsed': [0, num_days]    }# Initialize trackerprogress_tracker = ProgressTracker(title_str='SIRQIs IBM v0',                                   progress_dict=progress_dict)# Initialize result writer and copy parametersresults_writer = ResultsWriter(**results_dict)results_writer.parameters_copy()# Iterate through all simulationsfor run in range(num_runs):    # Initialize objects based on given parameters    general_population = GeneralPopulation(general_population_dict)    quarantine = Quarantine(quarantine_dict)    isolation = Isolation(isolation_dict)    # Iterate through all days to simulate    for day in range(num_days):        # Simulate a single day        simulate_time_step(general_population, quarantine, isolation)        # Update tracking dictionary and progress tracker        progress_dict['Simulations run'][0] = run        progress_dict['Days elapsed'][0] = day        progress_tracker.update(progress_dict)    # Write results to file    results_writer.write_to_file(general_population.total_susceptible,                                 general_population.total_infected,                                 general_population.total_infectious,                                 general_population.total_recovered,                                 quarantine.total_quarantined,                                 quarantine.quarantined_using_resources,                                 isolation.total_isolated,                                 isolation.isolated_using_resources)# Plot results and saveplot.plot_batch(results_writer.batch_dir)# Display completed progress trackerprogress_dict['Simulations run'][0] = num_runsprogress_dict['Days elapsed'][0] = num_daysprogress_tracker.update(progress_dict)